# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  release:
    types: [ released ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    if: startsWith( github.ref, 'refs/tags/3.' )

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/${{ env.RELEASE_VERSION }}
          owner: rramo012
          repo: testing-release-drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 8
          format: 'YYYY-MM-DD-HH-mm-ss'
          
      - uses: CamiloGarciaLaRotta/watermelon-http-client@v1
        with:
          url: 'https://wiki.central.inmotionhosting.com/graphql'
          headers: '{"Authorization": "bearer ${{ secrets.CENTRAL_WIKIJS_TOKEN }}", "Content-type": "application/json" }'
          operation_name: Page
          method: post
          graphql: |
            mutation Page {
              pages {
                create (
                    title: "Release Front End - ${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}",
                    content: "testing\r\ndsfsdf",
                    description: "${{ steps.time.outputs.time }}",
                    editor: "markdown",
                    isPublished: true, 
                    isPrivate: false, 
                    locale: "en", 
                    path:"/Releases/${{ steps.time.outputs.time }}", 
                    tags: [], 
                ) {
                  responseResult {
                    succeeded,
                  }
                }
              }
            }

